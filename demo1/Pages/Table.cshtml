@page "/Table"
<h1>Table</h1>

<button onclick="show_archetypes()">show_archetypes</button>
<hr>
<table id="table">

</table>

<script>




function generate_htmltable_archetypes(etable, archetypes)
{
	var cell;
	var row;
	row = etable.insertRow(-1);
	cell = row.insertCell(-1);
	cell.innerHTML = "name";
	cell = row.insertCell(-1);
	cell.innerHTML = "quantity";
	cell = row.insertCell(-1);
	cell.innerHTML = "n";
	cell = row.insertCell(-1);
	cell.innerHTML = "offset";
	cell = row.insertCell(-1);
	cell.innerHTML = "size";
	cell = row.insertCell(-1);
	cell.innerHTML = "value";
	for (name in archetypes)
	{
		var layouts = archetypes[name].layouts;
		//console.log(i);
		for (j in layouts)
		{
			row = etable.insertRow(-1);
			cell = row.insertCell(-1);
			cell.innerHTML = name;
			cell = row.insertCell(-1);
			cell.innerHTML = layouts[j].quantity;
			cell = row.insertCell(-1);
			cell.innerHTML = layouts[j].n;
			cell = row.insertCell(-1);
			cell.innerHTML = layouts[j].offset;
			cell = row.insertCell(-1);
			cell.innerHTML = layouts[j].size;
			cell = row.insertCell(-1);
			cell.innerHTML = 0;
			layouts[j]._cell = cell;
		}
	}
	//var row = etable.insertRow(0);
}


var converters = {};
converters["timestamp"] = function(view)
{
	var r;
	r = view.getFloat64(0, true);
	return JSON.stringify(r);
}
converters["position_gcs"] = function(view)
{
	var r = [];
	r[0] = view.getFloat32(0, true);
	r[1] = view.getFloat32(4, true);
	return JSON.stringify(r);
}
converters["temperature"] = function(view)
{
	var r;
	r = view.getFloat32(0, true);
	return JSON.stringify(r);
}
converters["humidity"] = function(view)
{
	var r;
	r = view.getFloat32(0, true);
	return JSON.stringify(r);
}
converters["position_xyzw"] = function(view)
{
	var r = [];
	r[0] = view.getFloat32(0, true);
	r[1] = view.getFloat32(4, true);
	r[2] = view.getFloat32(8, true);
	r[3] = view.getFloat32(12, true);
	return JSON.stringify(r);
}


//https://www.hardill.me.uk/wordpress/2014/08/29/unpacking-binary-data-from-mqtt-in-javascript/
function fluff(payload)
{
	var buffer = new ArrayBuffer(payload.length);
	uint = new Uint8Array(buffer);
	for (var i=0; i < payload.length; i++)
	{
		uint[i] = payload[i];
	}
	return uint;
}


function show_archetypes()
{
	var client = mqtt.connect("ws://192.168.1.195:1884");
	client.on('connect', function () 
	{
		console.log("mqtt connected");
	})




	var etable = document.getElementById("table");
	req_json('doors', (archetypes) => 
	{
		generate_htmltable_archetypes(etable, archetypes);
		console.log(archetypes);
		for (topic in archetypes)
		{
			console.log("subscribe: " + topic);
			client.subscribe(topic);
		}

		client.on("message", function (topic, payload)
		{
			console.log(payload);
			//console.log(fluff(payload));
			//dataview = new DataView(fluff(payload).buffer);
			var layouts = archetypes[topic].layouts;
			for (name in layouts)
			{
				//console.log(name);
				var offset = layouts[name].offset;
				//Warning! The payload does not start at byte 0!
				dataview = new DataView(payload.buffer, payload.byteOffset + offset);
				//console.log(name, offset);
				var cell = layouts[name]._cell;
				var s = converters[name](dataview);
				//console.log(s);
				cell.innerHTML = s;
			}
		});

	});
}
</script>