@page "/Table"
<h1>Series</h1>

<button onclick="show_archetypes()">Show series</button>
<button onclick="new_plotter_window()" id="plotbutton">New plotter window</button>
<a id="plotlink" href="" target="_blank">Plotter</a>
<hr>
<table id="table"></table>

<script>

var plotlink_href = "";

function new_plotter_window()
{
	w = 800;
	h = 600;
	x = 400;
	y = 400;
	window.open(plotlink_href,"Plotter:"+plotlink_href,"resizable=no,toolbar=no,scrollbars=no,menubar=no,status=no,directories=n o,width="+w+",height="+h+",left="+x+",top="+y+"");
}


function generate_htmltable_archetypes(etable, archetypes)
{
	var cell;
	var row;
	row = etable.insertRow(-1);
	cell = row.insertCell(-1);
	cell.innerHTML = "series";
	cell = row.insertCell(-1);
	cell.innerHTML = "component";
	cell = row.insertCell(-1);
	cell.innerHTML = "quantity";
	cell = row.insertCell(-1);
	cell.innerHTML = "n";
	cell = row.insertCell(-1);
	cell.innerHTML = "offset";
	cell = row.insertCell(-1);
	cell.innerHTML = "size";
	cell = row.insertCell(-1);
	cell.innerHTML = "endian";
	cell = row.insertCell(-1);
	cell.innerHTML = "value";
	for (let archetype in archetypes)
	{
		var components = archetypes[archetype].components;
		//console.log(i);
		for (let j in components)
		{
			row = etable.insertRow(-1);
			cell = row.insertCell(-1);
			cell.innerHTML = archetype;
			cell = row.insertCell(-1);
			cell.innerHTML = j;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].quantity;
			cell.classList.add(components[j].quantity);
			components[j]._color = window.getComputedStyle(cell ,null).getPropertyValue('background-color');
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].n;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].offset;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].size;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].endian;
			cell = row.insertCell(-1);
			cell.innerHTML = 0;
			components[j]._cell = cell;
			/*
			cell.onclick = () => 
			{
				hej(name, j);
			}
			*/
		}
	}
	//var row = etable.insertRow(0);
}

var etable = document.getElementById("table");
var plotbutton = document.getElementById("plotbutton");
plotbutton.disabled = true;
//var plotlink = document.getElementById("plotlink");




var client = mqtt.connect("ws://192.168.1.195:1884");
client.on('connect', function () 
{
	console.log("mqtt connected");
});


function generate_url(archetypes)
{
	var selected = {};
	for (archetype in archetypes)
	{
		var components = archetypes[archetype].components;
		for (component in components)
		{
			let cell = components[component]._cell;
			if (cell.classList.contains("selected"))
			{
				if (archetype in selected === false)
				{
					selected[archetype] = [];
				}
				selected[archetype].push(component);
			}
		}
	}
	console.log(selected);
	//console.log(t);
	//console.log(atob(decodeURIComponent(t)));
	if (Object.keys(selected).length > 0)
	{
		plotbutton.disabled = false;
		var s = JSON.stringify(selected);
		var t = encodeURIComponent(btoa(s));
		plotlink_href = "/Plotter#"+t;
	}
	else
	{
		plotbutton.disabled = true;
	}
}

function show_archetypes()
{
	req_json('archetypes', (archetypes) => 
	{
		generate_htmltable_archetypes(etable, archetypes);
		//console.log(archetypes);

		for (topic in archetypes)
		{
			console.log("subscribe: " + topic);
			client.subscribe(topic);
		}
		
		var selected = {};

		for (archetype in archetypes)
		{
			var components = archetypes[archetype].components;
			for (component in components)
			{
				let cell = components[component]._cell;
				cell.onclick = () => 
				{
					cell.classList.toggle("selected");
					generate_url(archetypes);
				}
			}
		}



		client.on("message", function (topic, payload)
		{
			//console.log(payload);
			var components = archetypes[topic].components;
			for (component in components)
			{
				//Warning! The payload does not start at byte 0!
				dataview = new DataView(payload.buffer, payload.byteOffset + components[component].offset);
				var s = converters[component](dataview);
				var cell = components[component]._cell;
				cell.innerHTML = JSON.stringify(s);
			}
		});
	});
}






</script>