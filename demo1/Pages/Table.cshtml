@page "/Table"
<h1>Table</h1>

<button onclick="show_archetypes()">show_archetypes</button>
<hr>
<table id="table"></table>
<div id="myDiv"></div>

<script>


function hej(name, j)
{
	console.log(name, j);
}

function generate_htmltable_archetypes(etable, archetypes)
{
	var cell;
	var row;
	row = etable.insertRow(-1);
	cell = row.insertCell(-1);
	cell.innerHTML = "name";
	cell = row.insertCell(-1);
	cell.innerHTML = "quantity";
	cell = row.insertCell(-1);
	cell.innerHTML = "n";
	cell = row.insertCell(-1);
	cell.innerHTML = "offset";
	cell = row.insertCell(-1);
	cell.innerHTML = "size";
	cell = row.insertCell(-1);
	cell.innerHTML = "endian";
	cell = row.insertCell(-1);
	cell.innerHTML = "value";
	for (let archetype in archetypes)
	{
		var components = archetypes[archetype].components;
		//console.log(i);
		for (let j in components)
		{
			row = etable.insertRow(-1);
			cell = row.insertCell(-1);
			cell.innerHTML = archetype;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].quantity;
			cell.classList.add(components[j].quantity);
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].n;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].offset;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].size;
			cell = row.insertCell(-1);
			cell.innerHTML = components[j].endian;
			cell = row.insertCell(-1);
			cell.innerHTML = 0;
			components[j]._cell = cell;
			/*
			cell.onclick = () => 
			{
				hej(name, j);
			}
			*/
		}
	}
	//var row = etable.insertRow(0);
}


var converters = {};
converters["timestamp"] = function(view)
{
	var r;
	r = view.getFloat64(0, true);
	return r;
}
converters["position_gcs"] = function(view)
{
	var r = [];
	r[0] = view.getFloat32(0, true);
	r[1] = view.getFloat32(4, true);
	return r;
}
converters["temperature"] = function(view)
{
	var r;
	r = view.getFloat32(0, true);
	return r;
}
converters["humidity"] = function(view)
{
	var r;
	r = view.getFloat32(0, true);
	return r;
}
converters["position_xyzw"] = function(view)
{
	var r = [];
	r[0] = view.getFloat32(0, true);
	r[1] = view.getFloat32(4, true);
	r[2] = view.getFloat32(8, true);
	r[3] = view.getFloat32(12, true);
	return r;
}



function plotter(archetypes)
{

	var traces = [];

	for (archetype in archetypes)
	{
		var components = archetypes[archetype].components;
		for (component in components)
		{
			let cell = components[component]._cell;
			if (cell.classList.contains("selected"))
			{
				var trace = 
				{
					y: [1,2,3],
					mode: 'lines',
					line: {color: '#80CAF6'}
				};
				traces.push(trace);
			}
		}
	}
	//https://plotly.com/javascript/streaming/
	Plotly.newPlot('myDiv', traces);
}


function show_archetypes()
{
	var client = mqtt.connect("ws://192.168.1.195:1884");
	client.on('connect', function () 
	{
		console.log("mqtt connected");
	});




	var etable = document.getElementById("table");

	req_json('archetypes', (archetypes) => 
	{
		generate_htmltable_archetypes(etable, archetypes);
		console.log(archetypes);
		for (topic in archetypes)
		{
			console.log("subscribe: " + topic);
			client.subscribe(topic);
		}


		for (archetype in archetypes)
		{
			var components = archetypes[archetype].components;
			for (component in components)
			{
				let cell = components[component]._cell;
				cell.onclick = () => 
				{
					cell.classList.toggle("selected");
					plotter(archetypes);
				}
			}
		}

		client.on("message", function (topic, payload)
		{
			var valuesy = [];
			var values0 = [];
			console.log(payload);
			//console.log(fluff(payload));
			//dataview = new DataView(fluff(payload).buffer);
			var components = archetypes[topic].components;
			for (component in components)
			{
				//Warning! The payload does not start at byte 0!
				dataview = new DataView(payload.buffer, payload.byteOffset + components[component].offset);
				var s = converters[component](dataview);
				var cell = components[component]._cell;
				cell.innerHTML = JSON.stringify(s);
				if (cell.classList.contains("selected"))
				{
					Plotly.extendTraces('myDiv', {y: [[s]]}, [0]);
					//valuesy.push([s]);
					//valuesy.push([s]);
				}
			}




		});

	});
}






</script>